package nl.axians.maven.plugins.owasp.model;

import jakarta.json.Json;
import jakarta.json.JsonObject;
import jakarta.json.JsonObjectBuilder;
import lombok.Builder;
import lombok.Getter;

import java.util.List;

/**
 * Represents a OWASP dependency vulnerability.
 */
@Getter
@Builder(toBuilder = true, setterPrefix = "with")
public class Vulnerability {

    private String fileName;
    private MavenCoordinate packageCoordinate;
    private MavenCoordinate includedByCoordinate;
    private String engineId;
    private String ruleId;
    private String owaspSeverity;
    private String sonarSeverity;
    private String description;
    private List<String> cwes;
    private Cvss cvss;

    /**
     * Convert the {@link Vulnerability} to a {@link JsonObject}.
     *
     * @return The {@link JsonObject} for this {@link Vulnerability}.
     */
    public JsonObject toJsonObject() {
        final JsonObjectBuilder builder = Json.createObjectBuilder()
                .add("ruleId", "owasp1")
                .add("effortMinutes", 2)
                .add("primaryLocation", Json.createObjectBuilder()
                        .add("message", getMessage())
                        .add("filePath", fileName));

        return builder.build();
    }

    /**
     * Get the vulnerability message. Constructed from different parts of the information.
     *
     * @return The complete vulnerability message.
     */
    private String getMessage() {
        final StringBuilder sb = new StringBuilder();
        sb.append("Dependency:  ").append(packageCoordinate).append(" | ");
        if (includedByCoordinate != null) {
            sb.append("Included by: ").append(includedByCoordinate).append(" | ");
        }

        sb.append("Reference: ").append(ruleId).append(" | ");

        if (cvss != null) {
            sb.append("CVSS score: ").append(cvss.getScore()).append(" | ");
        }

        if (cwes != null && !cwes.isEmpty()) {
            sb.append("Category: ").append(cwes.get(0).replaceAll("\"", "")).append(" | ");
        }

        sb.append(description);

        return sb.toString();
    }


}
