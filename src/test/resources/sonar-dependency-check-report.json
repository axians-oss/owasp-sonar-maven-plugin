{
  "rules": [
    {
      "id": "owasp1",
      "name": "OWASP dependency vulnerability",
      "description": "Vulnerabilities found by OWASP dependency check Maven plugin.",
      "engineId": "dependency-check-maven",
      "cleanCodeAttribute": "TRUSTWORTHY",
      "impacts": [
        {
          "softwareQuality": "SECURITY",
          "severity": "MEDIUM"
        }
      ]
    }
  ],
  "issues": [
    {
      "ruleId": "owasp1",
      "effortMinutes": 2,
      "primaryLocation": {
        "message": "Dependency:  net.minidev:json-smart:2.4.8 | Included by: com.azure:azure-identity:1.8.0 | Reference: CVE-2023-1370 | CVSS score: 7.5 | Category: CWE-674 | [Json-smart](https://netplex.github.io/json-smart/) is a performance focused, JSON processor lib. When reaching a ‘[‘ or ‘{‘ character in the JSON input, the code parses an array or an object respectively. It was discovered that the code does not have any limit to the nesting of such arrays or objects. Since the parsing of nested arrays and objects is done recursively, nesting too many of them can cause a stack exhaustion (stack overflow) and crash the software.",
        "filePath": "pom.xml"
      }
    },
    {
      "ruleId": "owasp1",
      "effortMinutes": 2,
      "primaryLocation": {
        "message": "Dependency:  org.yaml:snakeyaml:1.33 | Included by: io.quarkus:quarkus-config-yaml:2.16.3.Final | Reference: CVE-2022-1471 | CVSS score: 9.8 | Category: CWE-502 | SnakeYaml's Constructor() class does not restrict types which can be instantiated during deserialization. Deserializing yaml content provided by an attacker can lead to remote code execution. We recommend using SnakeYaml's SafeConsturctor when parsing untrusted content to restrict deserialization. We recommend upgrading to version 2.0 and beyond.\n",
        "filePath": "pom.xml"
      }
    },
    {
      "ruleId": "owasp1",
      "effortMinutes": 2,
      "primaryLocation": {
        "message": "Dependency:  io.vertx:vertx-web:4.3.7 | Included by: io.quarkus:quarkus-smallrye-health:2.16.3.Final | Reference: CVE-2023-24815 | CVSS score: 5.3 | Category: CWE-22 | Vert.x-Web is a set of building blocks for building web applications in the java programming language. When running vertx web applications that serve files using `StaticHandler` on Windows Operating Systems and Windows File Systems, if the mount point is a wildcard (`*`) then an attacker can exfiltrate any class path resource. When computing the relative path to locate the resource, in case of wildcards, the code: `return \"/\" + rest;` from `Utils.java` returns the user input (without validation) as the segment to lookup. Even though checks are performed to avoid escaping the sandbox, given that the input was not sanitized `\\` are not properly handled and an attacker can build a path that is valid within the classpath. This issue only affects users deploying in windows environments and upgrading is the advised remediation path. There are no known workarounds for this vulnerability.",
        "filePath": "pom.xml"
      }
    }
  ]
}